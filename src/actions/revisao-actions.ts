'use server';

import { z } from 'zod';
import { createSafeActionClient } from 'next-safe-action';
import { supabase } from '@/lib/supabaseClient';
import { PEDIDO_STATUS } from '@/types/pedido.type';
import { REVISAO_STATUS_ADMIN } from '@/types/revisao.type';

const verificarAdminRole = async () => { 
  const { data: { user } } = await supabase.auth.getUser();
  if (!user) {
    console.log('[verificarAdminRole] Usu√°rio n√£o autenticado.');
    return false;
  }
  const { data: profile, error } = await supabase
    .from('profiles')
    .select('role')
    .eq('id', user.id)
    .single();

  if (error) {
    console.error('[verificarAdminRole] Erro ao buscar perfil:', error);
    return false;
  }
  if (!profile) {
    console.log('[verificarAdminRole] Perfil n√£o encontrado para o usu√°rio.');
    return false;
  }
  
  const isAdmin = profile.role === 'admin';
  console.log(`[verificarAdminRole] Usu√°rio ${user.id} √© admin: ${isAdmin}`);
  return isAdmin;
};

export const processarRevisaoAdminSchema = z.object({
  solicitacaoId: z.string().uuid({ message: "ID da solicita√ß√£o inv√°lido." }),
  adminFeedback: z.string().optional(),
  audioFile: z
    .instanceof(File, { message: "Arquivo de √°udio √© obrigat√≥rio." })
    .refine((file) => file.size > 0, { message: "Arquivo de √°udio n√£o pode estar vazio." })
    .refine((file) => file.type.startsWith('audio/'), { message: "Arquivo deve ser um √°udio." })
    .nullable()
    .optional(),
  novoStatusRevisao: z.enum(
    [
      REVISAO_STATUS_ADMIN.EM_ANDAMENTO_ADMIN,
      REVISAO_STATUS_ADMIN.REVISADO_FINALIZADO,
      REVISAO_STATUS_ADMIN.INFO_SOLICITADA_AO_CLIENTE,
      REVISAO_STATUS_ADMIN.NEGADA,
      REVISAO_STATUS_ADMIN.CLIENTE_RESPONDEU
    ],
    {
      required_error: "O novo status da revis√£o √© obrigat√≥rio.",
      invalid_type_error: "Status de revis√£o inv√°lido."
    }
  ),
});

const actionClientAdmin = createSafeActionClient({
  handleServerError(e: Error) {
    console.error("üî¥ Erro n√£o capturado na Server Action (handleServerError):", e);
    return { serverError: `Erro inesperado no servidor: ${e.message}` };
  },
});

const API_URL = import.meta.env.VITE_API_URL || 'http://localhost:3001';

export const processarRevisaoAdminAction = actionClientAdmin
  .schema(processarRevisaoAdminSchema)
  .action(async ({ parsedInput }) => {
    const isAdmin = await verificarAdminRole();
    if (!isAdmin) {
      console.warn("[processarRevisaoAdminAction] Tentativa de execu√ß√£o por n√£o admin.");
      return { serverError: "ACESSO_NEGADO_ADMIN" }; 
    }

    const { solicitacaoId, adminFeedback, audioFile, novoStatusRevisao } = parsedInput;
    
    console.log(`[Action processarRevisaoAdmin] Iniciando para solicita√ß√£o ID: ${solicitacaoId} com novo status: ${novoStatusRevisao}`);
    if (audioFile) {
      console.log(`[Action processarRevisaoAdmin] Arquivo fornecido: ${audioFile.name}, Tamanho: ${audioFile.size}, Tipo: ${audioFile.type}`);
    } else {
      console.log(`[Action processarRevisaoAdmin] Nenhum arquivo de √°udio fornecido para esta a√ß√£o.`);
    }

    const { data: solicitacaoData, error: solicitacaoError } = await supabase
      .from('solicitacoes_revisao')
      .select('pedido_id, status_revisao, user_id')
      .eq('id', solicitacaoId)
      .single();

    if (solicitacaoError || !solicitacaoData) {
      console.error('[Action processarRevisaoAdmin] Erro ao buscar solicita√ß√£o:', solicitacaoError);
      return { failure: 'Solicita√ß√£o de revis√£o n√£o encontrada.' };
    }
    const { pedido_id: pedidoId, status_revisao: statusAtualRevisao, user_id: clienteUserId } = solicitacaoData;
    console.log(`[Action processarRevisaoAdmin] Pedido ID: ${pedidoId}, Cliente User ID: ${clienteUserId}, Status Atual: ${statusAtualRevisao}`);

    if (!clienteUserId) {
        console.error('[Action processarRevisaoAdmin] User ID do cliente n√£o encontrado na solicita√ß√£o.');
        return { failure: 'User ID do cliente n√£o encontrado.' };
    }

    const { data: profileData, error: profileError } = await supabase
        .from('profiles')
        .select('username')
        .eq('id', clienteUserId)
        .single();

    if (profileError || !profileData || !profileData.username) {
        console.error('[Action processarRevisaoAdmin] Erro ao buscar username do cliente:', profileError);
        return { failure: 'N√£o foi poss√≠vel encontrar o username do cliente.' };
    }
    const clientUsername = profileData.username;
    console.log(`[Action processarRevisaoAdmin] Username do cliente: ${clientUsername}`);

    if (statusAtualRevisao === REVISAO_STATUS_ADMIN.REVISADO_FINALIZADO || statusAtualRevisao === REVISAO_STATUS_ADMIN.NEGADA) {
        console.warn(`[Action processarRevisaoAdmin] Tentativa de processar solicita√ß√£o que j√° est√° '${statusAtualRevisao}'.`);
        return { failure: `Esta solicita√ß√£o de revis√£o j√° foi processada (status: ${statusAtualRevisao}).`};
    }

    if (novoStatusRevisao === REVISAO_STATUS_ADMIN.REVISADO_FINALIZADO) {
      if (!audioFile) {
        console.error('[Action processarRevisaoAdmin:REVISADO_FINALIZADO] Arquivo de √°udio n√£o fornecido, mas √© obrigat√≥rio para este status.');
        return { failure: 'Arquivo de √°udio √© obrigat√≥rio para marcar a revis√£o como finalizada.' };
      }
      console.log(`[Action processarRevisaoAdmin] FLUXO: REVISADO_FINALIZADO COM ARQUIVO. Enviando para API Route...`);
      
      const formData = new FormData();
      formData.append('revisaoAudioFile', audioFile);
      formData.append('solicitacaoId', solicitacaoId);
      formData.append('adminFeedback', adminFeedback || '');
      formData.append('novoStatusRevisao', novoStatusRevisao);
      formData.append('clientUsername', clientUsername); 
      formData.append('pedidoId', pedidoId); 

      try {
        const apiUrlComUsername = `${API_URL}/api/revisoes/processar-upload/${encodeURIComponent(clientUsername)}`;
        console.log(`[Action processarRevisaoAdmin] Chamando API: ${apiUrlComUsername}`);
        const response = await fetch(apiUrlComUsername, {
          method: 'POST',
          body: formData,
        });

        const result = await response.json();

        if (!response.ok || !result.success) {
          console.error('[Action processarRevisaoAdmin] Falha na API de upload:', result);
          return { failure: result.failure || `Erro na API de upload (${response.status}): ${response.statusText}` };
        }
        console.log('[Action processarRevisaoAdmin] Sucesso na API de upload (REVISADO_FINALIZADO):', result);
        return { success: result.message || 'Revis√£o processada e √°udio salvo com sucesso.' };

      } catch (fetchError: any) {
        console.error('[Action processarRevisaoAdmin] Erro no fetch para API de upload:', fetchError);
        return { failure: `Erro de comunica√ß√£o com o servidor de upload: ${fetchError.message}` };
      }
    } else if (novoStatusRevisao === REVISAO_STATUS_ADMIN.NEGADA) {
      console.log(`[Action processarRevisaoAdmin] FLUXO: REVIS√ÉO NEGADA.`);
      if (audioFile) {
        console.warn('[Action processarRevisaoAdmin:NEGADA] Arquivo de √°udio fornecido para nega√ß√£o, ser√° ignorado.');
      }
      if (!adminFeedback || adminFeedback.trim() === '') {
        return { failure: 'Feedback do administrador √© obrigat√≥rio ao negar uma revis√£o.' };
      }

      const { error: updateSolicitacaoError } = await supabase
        .from('solicitacoes_revisao')
        .update({
          status_revisao: REVISAO_STATUS_ADMIN.NEGADA,
          admin_feedback: adminFeedback,
          data_conclusao_revisao: new Date().toISOString(),
        })
        .eq('id', solicitacaoId);

      if (updateSolicitacaoError) {
        console.error('[Action processarRevisaoAdmin:NEGADA] Erro ao atualizar solicita√ß√£o:', updateSolicitacaoError);
        return { failure: `Erro ao marcar a revis√£o como negada: ${updateSolicitacaoError.message}` };
      }

      const { error: updatePedidoError } = await supabase
        .from('pedidos')
        .update({ status: PEDIDO_STATUS.CONCLUIDO })
        .eq('id', pedidoId);

      if (updatePedidoError) {
        console.error('[Action processarRevisaoAdmin:NEGADA] Erro ao atualizar pedido principal para CONCLU√çDO:', updatePedidoError);
      }
      return { success: 'Revis√£o marcada como negada e feedback enviado ao cliente.' };
    } else if (novoStatusRevisao === REVISAO_STATUS_ADMIN.INFO_SOLICITADA_AO_CLIENTE) {
      console.log(`[Action processarRevisaoAdmin] FLUXO: INFO_SOLICITADA_AO_CLIENTE.`);
      if (audioFile) {
        console.warn('[Action processarRevisaoAdmin:INFO_SOLICITADA] Arquivo de √°udio fornecido, ser√° ignorado.');
      }
      if (!adminFeedback || adminFeedback.trim() === '') {
        return { failure: 'Feedback do administrador √© obrigat√≥rio ao solicitar mais informa√ß√µes.' };
      }

      const { error: updateSolError } = await supabase
        .from('solicitacoes_revisao')
        .update({
          status_revisao: REVISAO_STATUS_ADMIN.INFO_SOLICITADA_AO_CLIENTE,
          admin_feedback: adminFeedback,
          admin_info_request_details: adminFeedback,
        })
        .eq('id', solicitacaoId);
      
      if (updateSolError) {
        console.error(`[Action processarRevisaoAdmin:INFO_SOLICITADA] Erro ao atualizar status:`, updateSolError);
        return { failure: `Erro ao solicitar mais informa√ß√µes: ${updateSolError.message}` };
      }

      const { error: updatePedidoError } = await supabase
        .from('pedidos')
        .update({ status: PEDIDO_STATUS.AGUARDANDO_CLIENTE })
        .eq('id', pedidoId);

      if (updatePedidoError) {
        console.error('[Action processarRevisaoAdmin:INFO_SOLICITADA] Erro ao atualizar pedido principal para AGUARDANDO_CLIENTE:', updatePedidoError);
      }
      return { success: 'Status da revis√£o atualizado para "Informa√ß√µes Solicitadas ao Cliente". O pedido principal est√° aguardando o cliente.' };
    } else if (novoStatusRevisao === REVISAO_STATUS_ADMIN.EM_ANDAMENTO_ADMIN) {
      console.log(`[Action processarRevisaoAdmin] FLUXO: EM_ANDAMENTO_ADMIN.`);
      if (audioFile) {
        console.warn('[Action processarRevisaoAdmin:EM_ANDAMENTO_ADMIN] Arquivo de √°udio fornecido, ser√° ignorado, pois este status √© intermedi√°rio.');
      }
      const { error: updateSolError } = await supabase
        .from('solicitacoes_revisao')
        .update({
          status_revisao: REVISAO_STATUS_ADMIN.EM_ANDAMENTO_ADMIN,
          admin_feedback: adminFeedback || undefined, 
        })
        .eq('id', solicitacaoId);

      if (updateSolError) {
        console.error(`[Action processarRevisaoAdmin:EM_ANDAMENTO_ADMIN] Erro ao atualizar status:`, updateSolError);
        return { failure: `Erro ao atualizar status da solicita√ß√£o para "Em Andamento": ${updateSolError.message}` };
      }
      
      const { error: updatePedidoError } = await supabase
        .from('pedidos')
        .update({ status: PEDIDO_STATUS.EM_REVISAO }) 
        .eq('id', pedidoId);
      
      if (updatePedidoError) {
         console.error('[Action processarRevisaoAdmin:EM_ANDAMENTO_ADMIN] Erro ao garantir que o pedido principal est√° EM_REVISAO:', updatePedidoError);
      }
      return { success: 'Status da revis√£o atualizado para "Em Andamento pelo Admin".' };
    } else {
        console.warn(`[Action processarRevisaoAdmin] Combina√ß√£o n√£o tratada ou status inesperado: status ${novoStatusRevisao} com audioFile ${audioFile ? 'presente' : 'ausente'}`);
        return { failure: 'A√ß√£o n√£o permitida ou combina√ß√£o de status e arquivo inv√°lida.' };
    }
  }); 